# Load libraries
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(lubridate)
# Read the data
# You may need to adjust the path to match where your file is stored
data <- read.csv("gas_consumption_data.csv")
# Create a proper date column (first day of each month)
data$date <- as.Date(paste(data$year, data$month, "01", sep="-"))
# Convert to a time series object
gas_ts <- ts(data$total_consumption,
start=c(min(data$year), min(data$month)),
frequency=12)  # 12 periods per year (monthly data)
# Basic plots
plot(gas_ts, main="Total Gas Consumption Over Time",
xlab="Year", ylab="Total Consumption (units)")
# Decompose the time series to see trend, seasonality, and remainder
gas_decomp <- decompose(gas_ts)
plot(gas_decomp)
# Step 3: Time series analysis
# Check stationarity
adf_test <- adf.test(gas_ts)
print(adf_test)  # p-value < 0.05 means the series is stationary
# If not stationary, we might need differencing
if (adf_test$p.value > 0.05) {
gas_diff <- diff(gas_ts)
plot(gas_diff, main="Differenced Gas Consumption",
xlab="Year", ylab="Change in Consumption")
# Check stationarity again
adf_diff <- adf.test(gas_diff)
print(adf_diff)
}
# ACF and PACF plots to help identify potential ARIMA parameters
par(mfrow=c(1,2))
acf(gas_ts, main="ACF of Gas Consumption")
pacf(gas_ts, main="PACF of Gas Consumption")
par(mfrow=c(1,1))
# Step 4: Modeling
# Automatic ARIMA model selection
gas_arima <- auto.arima(gas_ts)
summary(gas_arima)
# Forecast for the next year
gas_forecast <- forecast(gas_arima, h=12)  # forecast 12 months ahead
plot(gas_forecast, main="Gas Consumption Forecast",
xlab="Year", ylab="Total Consumption (units)")
# Step 5: Additional visualizations with ggplot2
# Convert time series to data frame for ggplot
gas_df <- data.frame(
Date = as.Date(time(gas_ts), origin = "1970-01-01"),
Consumption = as.numeric(gas_ts)
)
# Create a ggplot visualization
ggplot(gas_df, aes(x = Date, y = Consumption)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", span = 0.2, se = FALSE, color = "red") +
labs(title = "Gas Consumption Time Series Analysis",
subtitle = "With trend line",
x = "Time",
y = "Gas Consumption (units)") +
theme_minimal()
# Population vs Consumption analysis
# Scatter plot to examine relationship
ggplot(data, aes(x = population, y = total_consumption)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Relationship between Population and Gas Consumption",
x = "Population",
y = "Total Gas Consumption (units)") +
theme_minimal()
# Calculate per capita consumption and plot over time
data$per_capita_consumption <- data$total_consumption / data$population
ggplot(data, aes(x = date, y = per_capita_consumption)) +
geom_line(color = "darkgreen") +
labs(title = "Per Capita Gas Consumption Over Time",
x = "Time",
y = "Per Capita Consumption (units)") +
theme_minimal()
# Seasonal analysis - average consumption by month
monthly_avg <- aggregate(total_consumption ~ month, data, mean)
monthly_avg$month_name <- month.name[monthly_avg$month]
monthly_avg$month_name <- factor(monthly_avg$month_name, levels = month.name)
ggplot(monthly_avg, aes(x = month_name, y = total_consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Gas Consumption by Month",
x = "Month",
y = "Average Consumption (units)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 6: Model evaluation
# Check residuals
checkresiduals(gas_arima)
# Box-Ljung test for autocorrelation in residuals
Box.test(residuals(gas_arima), lag = 12, type = "Ljung-Box")
# Load libraries
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(lubridate)
# Read the data
# You may need to adjust the path to match where your file is stored
data <- read.csv("G:\\4th Year 2nd Sem\\Agent Based System\\March-08\\gas_consumption_data.csv")
# Load libraries
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(lubridate)
# Read the data
# You may need to adjust the path to match where your file is stored
data <- read.csv("G:\\4th Year 2nd Sem\\Agent Based System\\March-08-II\\gas_consumption_data.csv")
# Create a proper date column (first day of each month)
data$date <- as.Date(paste(data$year, data$month, "01", sep="-"))
# Convert to a time series object
gas_ts <- ts(data$total_consumption,
start=c(min(data$year), min(data$month)),
frequency=12)  # 12 periods per year (monthly data)
# Basic plots
plot(gas_ts, main="Total Gas Consumption Over Time",
xlab="Year", ylab="Total Consumption (units)")
# Decompose the time series to see trend, seasonality, and remainder
gas_decomp <- decompose(gas_ts)
plot(gas_decomp)
# Step 3: Time series analysis
# Check stationarity
adf_test <- adf.test(gas_ts)
print(adf_test)  # p-value < 0.05 means the series is stationary
# If not stationary, we might need differencing
if (adf_test$p.value > 0.05) {
gas_diff <- diff(gas_ts)
plot(gas_diff, main="Differenced Gas Consumption",
xlab="Year", ylab="Change in Consumption")
# Check stationarity again
adf_diff <- adf.test(gas_diff)
print(adf_diff)
}
# ACF and PACF plots to help identify potential ARIMA parameters
par(mfrow=c(1,2))
acf(gas_ts, main="ACF of Gas Consumption")
pacf(gas_ts, main="PACF of Gas Consumption")
par(mfrow=c(1,1))
# Step 4: Modeling
# Automatic ARIMA model selection
gas_arima <- auto.arima(gas_ts)
summary(gas_arima)
# Forecast for the next year
gas_forecast <- forecast(gas_arima, h=12)  # forecast 12 months ahead
plot(gas_forecast, main="Gas Consumption Forecast",
xlab="Year", ylab="Total Consumption (units)")
# Step 5: Additional visualizations with ggplot2
# Convert time series to data frame for ggplot
gas_df <- data.frame(
Date = as.Date(time(gas_ts), origin = "1970-01-01"),
Consumption = as.numeric(gas_ts)
)
# Create a ggplot visualization
ggplot(gas_df, aes(x = Date, y = Consumption)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", span = 0.2, se = FALSE, color = "red") +
labs(title = "Gas Consumption Time Series Analysis",
subtitle = "With trend line",
x = "Time",
y = "Gas Consumption (units)") +
theme_minimal()
# Population vs Consumption analysis
# Scatter plot to examine relationship
ggplot(data, aes(x = population, y = total_consumption)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Relationship between Population and Gas Consumption",
x = "Population",
y = "Total Gas Consumption (units)") +
theme_minimal()
# Calculate per capita consumption and plot over time
data$per_capita_consumption <- data$total_consumption / data$population
ggplot(data, aes(x = date, y = per_capita_consumption)) +
geom_line(color = "darkgreen") +
labs(title = "Per Capita Gas Consumption Over Time",
x = "Time",
y = "Per Capita Consumption (units)") +
theme_minimal()
# Seasonal analysis - average consumption by month
monthly_avg <- aggregate(total_consumption ~ month, data, mean)
monthly_avg$month_name <- month.name[monthly_avg$month]
monthly_avg$month_name <- factor(monthly_avg$month_name, levels = month.name)
ggplot(monthly_avg, aes(x = month_name, y = total_consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Gas Consumption by Month",
x = "Month",
y = "Average Consumption (units)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 6: Model evaluation
# Check residuals
checkresiduals(gas_arima)
# Box-Ljung test for autocorrelation in residuals
Box.test(residuals(gas_arima), lag = 12, type = "Ljung-Box")
# Load libraries
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(lubridate)
# Read the data - adjust the path as needed
data <- read.csv("G:/4th Year 2nd Sem/Agent Based System/March-08-II/gas_consumption_data.csv")
# Check the structure of the imported data
str(data)
head(data)
# Fix column names if needed (adjust these based on your actual CSV structure)
# If your columns have different names, rename them here
colnames(data) <- c("tick", "month", "year", "current_month_name", "consumption")
# Create a proper date column - we need to handle potential formatting issues
# First convert year and month to numeric if they aren't already
data$year <- as.numeric(as.character(data$year))
data$month <- as.numeric(as.character(data$month))
# Now create the date column, ensuring proper formatting by adding leading zeros to month
data$date <- as.Date(paste(data$year + 2000, sprintf("%02d", data$month), "01", sep="-"))
# Add a population column if it doesn't exist (based on the NetLogo model)
# We use the initial population of 1000 and add growth over time
initial_population <- 1000
growth_rate <- 0.0003  # 0.03% monthly growth
# Calculate population for each month (compound growth)
data <- data %>%
arrange(year, month) %>%
mutate(month_index = row_number() - 1) %>%
mutate(population = initial_population * (1 + growth_rate)^month_index)
# Rename the consumption column to total_consumption for clarity
data$total_consumption <- data$consumption
# Convert to a time series object
gas_ts <- ts(data$total_consumption,
start=c(min(data$year), min(data$month)),
frequency=12)  # 12 periods per year (monthly data)
# Basic plots
plot(gas_ts, main="Total Gas Consumption Over Time",
xlab="Year", ylab="Total Consumption (units)")
# Decompose the time series to see trend, seasonality, and remainder
# Only perform decomposition if we have enough data points (at least 2 full years)
if(length(gas_ts) >= 24) {
gas_decomp <- decompose(gas_ts)
plot(gas_decomp)
} else {
cat("Not enough data points for decomposition (need at least 2 full years).\n")
}
# Step 3: Time series analysis
# Check stationarity - wrap in tryCatch to handle potential errors
tryCatch({
adf_test <- adf.test(gas_ts)
print(adf_test)  # p-value < 0.05 means the series is stationary
# If not stationary, we might need differencing
if (adf_test$p.value > 0.05) {
gas_diff <- diff(gas_ts)
plot(gas_diff, main="Differenced Gas Consumption",
xlab="Year", ylab="Change in Consumption")
# Check stationarity again
adf_diff <- adf.test(gas_diff)
print(adf_diff)
}
}, error = function(e) {
cat("Error in stationarity test:", e$message, "\n")
cat("This might be due to insufficient data or other issues.\n")
})
# ACF and PACF plots to help identify potential ARIMA parameters
par(mfrow=c(1,2))
acf(gas_ts, main="ACF of Gas Consumption")
pacf(gas_ts, main="PACF of Gas Consumption")
par(mfrow=c(1,1))
# Step 4: Modeling - use tryCatch to handle potential errors
tryCatch({
# Automatic ARIMA model selection
gas_arima <- auto.arima(gas_ts)
summary(gas_arima)
# Forecast for the next year
gas_forecast <- forecast(gas_arima, h=12)  # forecast 12 months ahead
plot(gas_forecast, main="Gas Consumption Forecast",
xlab="Year", ylab="Total Consumption (units)")
# Step 6: Model evaluation
# Check residuals
checkresiduals(gas_arima)
# Box-Ljung test for autocorrelation in residuals
Box.test(residuals(gas_arima), lag = 12, type = "Ljung-Box")
}, error = function(e) {
cat("Error in ARIMA modeling:", e$message, "\n")
cat("This might be due to insufficient data or other issues.\n")
})
# Step 5: Additional visualizations with ggplot2
# Convert time series to data frame for ggplot
gas_df <- data.frame(
Date = as.Date(time(gas_ts), origin = "1970-01-01"),
Consumption = as.numeric(gas_ts)
)
# Create a ggplot visualization
ggplot(gas_df, aes(x = Date, y = Consumption)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", span = 0.2, se = FALSE, color = "red") +
labs(title = "Gas Consumption Time Series Analysis",
subtitle = "With trend line",
x = "Time",
y = "Gas Consumption (units)") +
theme_minimal()
# Population vs Consumption analysis
# Scatter plot to examine relationship
ggplot(data, aes(x = population, y = total_consumption)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Relationship between Population and Gas Consumption",
x = "Population",
y = "Total Gas Consumption (units)") +
theme_minimal()
# Calculate per capita consumption and plot over time
data$per_capita_consumption <- data$total_consumption / data$population
ggplot(data, aes(x = date, y = per_capita_consumption)) +
geom_line(color = "darkgreen") +
labs(title = "Per Capita Gas Consumption Over Time",
x = "Time",
y = "Per Capita Consumption (units)") +
theme_minimal()
# Seasonal analysis - average consumption by month
monthly_avg <- aggregate(total_consumption ~ month, data, mean)
monthly_avg$month_name <- month.name[monthly_avg$month]
monthly_avg$month_name <- factor(monthly_avg$month_name, levels = month.name)
ggplot(monthly_avg, aes(x = month_name, y = total_consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Gas Consumption by Month",
x = "Month",
y = "Average Consumption (units)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save your visualizations
ggsave("gas_consumption_time_series.png", width = 10, height = 6)
ggsave("monthly_consumption_pattern.png", width = 10, height = 6)
